# This is an **example** API to demonstrate features of OpenAPI specification.
# It doesn't cover all OpenAPI features. For more full example check out: https://github.com/APIs-guru/petstore_extended

openapi: "3.0.1"
info:
  version: '1.0.0 - DRAFT VERSION'
  title: Chore Management
  contact:
    email: sralloza@gmail.com
    url: https://github.com/sralloza
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'

  description: |
    API to manage the chores with the flatmates in a shared flat.

    # Concepts

    - **User**: Each person living in the same flat, a flatmate.
    - **Flat**: A flat. Each user and chore is assigned to a different flat. This API is multi-flat, it can manage the chores of multiple flats. The flat is selected by the `x-flat` header. For more info about the `x-flat` header, please read the [multiflat](#section/Concepts/Multiflat) section.
    - **Chore Type**: A defined chore that needs to be executed weekly in the flat. Each chore type will be assigned weekly to a different flatmate.
    - **Weekly chores**: Chores grouped by week.
    - **Week ID**: Weeks are identified by the year and the week number, like `2022.03` (the third week of 2022).
    - **Ticket**: Number of chores of a specific type that the user is owed. For more info, read the [tickets system](#section/Concepts/Tickets-system) section.

    ## Multiflat

    ### Creating a flat

    To create a flat, ask the API manager (who has the admin token) to create a flat. You will be given the flat token, which you can use to register users, schedule weekly chores and more.

    ### Selecting a flat

    By default the flat is selected by the scope of the API key. Flat and User API keys are associated with a specific flat, but the Admin API key isn't. When using the Admin API key in operations where the floor must be selected, the `x-flat` header must be used to select it. If this header is used with a Flat or User API key the endpoint will return `400 - Can't use the x-flat header without the admin key`.

    ## Tickets system

    This API supports chore transfers. When a user transfers a chore to other user, a ticket also is transferred. A ticket is like a currency, +1 tickets means that the user is owed a chore (in the future another user will complete his chore), and -1 tickets means that the user owns a chore (in the future he will complete another user's chore).

    Diferent chore types are considered non equivalent, so a ticket of (the chore type) X can not be compensated with a ticket of type Y.

    ## Chore Assignements
    <!-- TODO: fill -->

    # Authorization

    Access is controlled with API key based authorization. There are 3 types of API keys with different auth levels. Each one of them contains the same permissions as the ones below and more specific permissions.

    1. **Admin API key** (_AdminApiKey_): there is only one. It has permission to do anything, from creating a new flat to mark a chore as completed.
    2. **Flat API key** (_FlatAdminApiKey_): there is one for each flat. It has permission to manage the flat assigned and the users assigned to the flat.
    3. **User API key** (_UserApiKey_): there is one for each user. It has permission to act in name of the user, like transfering chores or completing chores.

externalDocs:
 description: Github Repo
 url: 'https://github.com/sralloza/chore-management-api'

tags:
  - name: Flats
    description: Operations with flats.
  - name: Chore Types
    description: Operations with chore types
  - name: Users
    description: Operations with users
  - name: Week IDs
    description: Operations with week identifiers

servers:
  - url: 'https://chore-management-api.sralloza.es/v1'

paths:
  /flats:
    post:
      tags:
        - Flats
      summary: Create flat
      description: Create new flat.
      operationId: createFlat
      security:
        - AdminApiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FlatCreate'
            examples:
              FlatCreate:
                $ref: '#/components/examples/FlatCreate'
      responses:
        200:
          $ref: '#/components/responses/Flat'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/ForbiddenErrorAdminRequired'
    get:
      tags:
        - Flats
      summary: List flats
      description: List existing flats.
      operationId: listFlats
      security:
        - AdminApiKey: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlatList'
              examples:
                FlatList:
                  $ref: '#/components/examples/FlatList'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/ForbiddenErrorAdminRequired'

  /flats/{id}:
    get:
      tags:
        - Flats
      summary: Get flat
      description: Get flat details by id
      operationId: getFlat
      security:
        - FlatAdminApiKey: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/FlatName'
      responses:
        200:
          $ref: '#/components/responses/Flat'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                FlatAccessRequired:
                  $ref: '#/components/examples/FlatAccessRequired'
                InvalidFlatHeaderUse:
                  $ref: '#/components/examples/InvalidFlatHeaderUse'
                InvalidFlatRequested:
                  $ref: '#/components/examples/InvalidFlatRequested'
        404:
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - Flats
      summary: Delete flat
      description: Delete flat by id
      operationId: deleteFlat
      security:
        - FlatAdminApiKey: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/FlatName'
      responses:
        204:
          description: OK
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/ForbiddenErrorAdminRequired'
        404:
          $ref: '#/components/responses/NotFound'

  /chore-types:
    get:
      tags:
        - Chore Types
      summary: List defined chore types
      description: List the defined chore types.
      operationId: listChoreTypes
      security:
        - UserApiKey: []
      parameters:
        - name: x-flat
          in: header
          required: false
          schema:
            $ref: '#/components/schemas/XFlatHeader'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChoreType'
              examples:
                chore type list:
                  $ref: "#/components/examples/ChoreTypeList"
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: "#/components/responses/ForbiddenErrorUserRequired"
    post:
      tags:
        - Chore Types
      summary: Create chore type
      description: Define a new chore type.
      operationId: createChoreType
      security:
        - FlatAdminApiKey: []
      parameters:
        - name: x-flat
          in: header
          required: false
          schema:
            $ref: '#/components/schemas/XFlatHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChoreType'
            examples:
              ChoreType:
                $ref: '#/components/examples/ChoreType'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChoreType'
              examples:
                ChoreType:
                  $ref: '#/components/examples/ChoreType'
        400:
          $ref: '#/components/responses/ValidationError'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/ForbiddenErrorAdminRequired'

  /chore-types/{id}:
    get:
      tags:
        - Chore Types
      summary: Get chore type
      description: Get the details of a defined chore type using its id.
      operationId: getChoreType
      security:
        - UserApiKey: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ChoreTypeId'
        - name: x-flat
          in: header
          required: false
          schema:
            $ref: '#/components/schemas/XFlatHeader'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChoreType'
              examples:
                ChoreType:
                  $ref: '#/components/examples/ChoreType'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        403:
          $ref: '#/components/responses/ForbiddenErrorUserRequired'
    delete:
      tags:
        - Chore Types
      summary: Delete chore type
      description: Delete a chore type by id
      operationId: deleteChoreType
      security:
        - FlatAdminApiKey: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ChoreTypeId'
        - name: x-flat
          in: header
          required: false
          schema:
            $ref: '#/components/schemas/XFlatHeader'
      responses:
        204:
          description: OK
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        403:
          $ref: '#/components/responses/ForbiddenErrorAdminRequired'

  /week-id/last:
    get:
      tags:
        - Week IDs
      summary: Get last week ID
      description: Get last week's identifier
      operationId: getLastWeekId
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WeekID'

  /week-id/current:
    get:
      tags:
        - Week IDs
      summary: Get current week ID
      description: Get the current week identifier
      operationId: getCurrentWeekId
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WeekID'

  /week-id/next:
    get:
      tags:
        - Week IDs
      summary: Get next week ID
      description: Get next week's identifier
      operationId: getNextWeekId
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WeekID'

  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user by id
      description: Get user information by id
      operationId: getUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UserIdPath'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

components:
  examples:
    AdminAccessRequired:
      description: The admin token is required
      value:
        mmesage: Admin access required

    ChoreType:
      value:
        id: livingRoom
        name: Living Room
        description: Clean the living room and the hallway

    ChoreTypeList:
      value:
        - id: livingRoom
          name: Living Room
          description: Clean the living room and the hallway

    Flat:
      value:
        name: flat-example
        token: ea427902-2db8-11ed-a261-0242ac120002

    FlatAccessRequired:
      description: An administration flat token is required
      value:
        message: Flat administration access required

    FlatCreate:
      value:
        name: flat-example

    FlatList:
      value:
        - name: flat-example
          token: ea427902-2db8-11ed-a261-0242ac120002

    InvalidFlatHeaderUse:
      description: The `x-flat` header was sent without an admin key
      value:
        message: Can't use the x-flat header without the admin key

    InvalidFlatRequested:
      description: The token provided does not grant access to the flat requested
      value:
        message: You don't have permission to access this flat's information

    UnuthorizedError:
      description: An API key is needed
      value:
        message: An API key is needed

    UserAccessRequired:
      description: A user token is required
      value:
        message: User access required

  responses:
    Flat:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Flat'
          examples:
            Flat:
              $ref: '#/components/examples/Flat'

    ForbiddenErrorAdminRequired:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          examples:
            AdminAccessRequired:
              $ref: '#/components/examples/AdminAccessRequired'

    ForbiddenErrorFlatRequired:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          examples:
            FlatAccessRequired:
              $ref: '#/components/examples/FlatAccessRequired'
            InvalidFlatHeaderUse:
              $ref: '#/components/examples/InvalidFlatHeaderUse'

    ForbiddenErrorUserRequired:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          examples:
            UserAccessRequired:
              $ref: '#/components/examples/UserAccessRequired'
            InvalidFlatHeaderUse:
              $ref: '#/components/examples/InvalidFlatHeaderUse'

    InvalidFlatRequested:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          examples:
            InvalidFlatRequested:
              $ref: '#/components/examples/InvalidFlatRequested'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            message: Resource not found

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          examples:
            UnuthorizedError:
              $ref: '#/components/examples/UnuthorizedError'

    ValidationError:
      description: Request contains invalid data
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Error'
              - type: object
                properties:
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/SingleValidationError'
          example:
            timestamp: '2022-09-04T21:17:15.900+00:00'
            status: 400
            error: Bad Request
            message: 'Validation failed for object=''exampleModel''. Error count: 1'
            errors:
              - codes:
                  - NotBlank.exampleModel.attribute
                  - NotBlank.attribute
                  - NotBlank.java.lang.String
                  - NotBlank
                arguments:
                  - codes:
                      - exampleModel.attribute
                      - attribute
                    arguments: null
                    defaultMessage: attribute
                    code: attribute
                defaultMessage: attribute can't be blank
                objectName: attribute
                field: attribute
                rejectedValue: null
                bindingFailure: false
                code: NotBlank
            path: /some-path

  schemas:
    ChoreType:
      description: Defined type of chore
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/ChoreTypeId'
        name:
          $ref: '#/components/schemas/ChoreTypeName'
        description:
          $ref: '#/components/schemas/ChoreTypeDescription'
      required:
      - id
      - name
      - description

    ChoreTypeDescription:
      description: Styled description of the chore type with markdown
      type: string
      minLength: 1
      maxLength: 255

    ChoreTypeId:
      description: ID of the chore type
      type: string
      minLength: 1
      maxLength: 25

    ChoreTypeName:
      description: Friendly name of the chore type
      type: string
      minLength: 1
      maxLength: 50

    Error:
      description: generic API error
      type: object
      additionalProperties: false
      properties:
        message:
          type: string
          description: A human readable description of what the event represent
      required:
        - message

    Flat:
      description: Registered flat
      type: object
      additionalProperties: false
      properties:
        name:
          $ref: '#/components/schemas/FlatName'
        token:
          type: string
          description: Admin flat token
          format: uuid
      required:
        - name
        - token

    FlatCreate:
      description: Register new flat
      type: object
      additionalProperties: false
      properties:
        name:
          type: string
          description: Name of the flat. Must be lowercase with dashes.
          pattern: '[a-z\-]+'
      required:
        - name
    FlatList:
      description: List of registered flats
      type: array
      items:
        $ref: '#/components/schemas/Flat'

    FlatName:
      type: string
      description: Name of the flat
      pattern: '[a-z\-]+'

    SingleValidationError:
      description: Validation error
      type: object
      additionalProperties: false
      properties:
        codes:
          type: array
          items:
            type: string
        arguments:
          type: object
        defaultMessage:
          type: string
        objectName:
          type: string
        field:
          type: string
        rejectedValue:
          type: string
        bindingFailure:
          type: boolean
        code:
          type: string
      required:
        - codes
        - arguments
        - defaultMessage
        - objectName
        - field
        - bindingFailure
        - code

    User:
      description: Registered user
      type: object
      additionalProperties: false
      properties:
        id:
          # TODO: fill size (a java long)
          type: integer
        username:
          # TODO: fill size limits
          type: string
        api_token:
          type: string
          format: uuid
      required:
        - id
        - username
        - api_token

    UserIdPath:
      # TODO: fill
      description: user id. This value should be replaced with
      type: object
      anyOf:
        - type: string
          format: enum
        - type: integer

    XFlatHeader:
      type: string
      description: Name of the flat. For more info please refer to the [multiflat](#section/Concepts/Multiflat) section

    WeekID:
      description: Week identifier
      type: string
      pattern: '\d{4}\.\d{2}'
      example: "2022.03"

  securitySchemes:
    AdminApiKey:
      type: apiKey
      in: header
      name: x-token
    FlatAdminApiKey:
      type: apiKey
      in: header
      name: x-token
    UserApiKey:
      type: apiKey
      in: header
      name: x-token
