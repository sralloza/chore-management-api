# This is an **example** API to demonstrate features of OpenAPI specification.
# It doesn't cover all OpenAPI features. For more full example check out: https://github.com/APIs-guru/petstore_extended

openapi: "3.0.1"
info:
  version: '1.0.0 - DRAFT VERSION'
  title: Chore Management
  contact:
    email: sralloza@gmail.com
    url: https://github.com/sralloza
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'

  description: |
    API to manage the chores with the flatmates in a shared flat.

    # Concepts

    - **User**: Each person living in the same flat, a flatmate.
    - **Flat**: A flat. Each user and chore is assigned to a different flat. This API is multi-flat, it can manage the chores of multiple flats. The flat is selected by the `x-flat` header. For more info about the `x-flat` header, please read the [multiflat](#section/Concepts/Multiflat) section.
    - **Chore Type**: A defined chore that needs to be executed weekly in the flat. Each chore type will be assigned weekly to a different flatmate.
    - **Weekly chores**: Chores grouped by week.
    - **Week ID**: Weeks are identified by the year and the week number, like `2022.03` (the third week of 2022).
    - **Ticket**: Number of chores of a specific type that the user is owed. For more info, read the [tickets system](#section/Concepts/Tickets-system) section.

    ## Multiflat

    ### Creating a flat

    To create a flat, ask the API manager (who has the admin token) to create a flat. You will be given the flat token, which you can use to register users, schedule weekly chores and more.

    ### Selecting a flat

    By default the flat is selected by the scope of the API key. Flat and User API keys are associated with a specific flat, but the Admin API key isn't. When using the Admin API key in operations where the floor must be selected, the `x-flat` header must be used to select it. If this header is used with a Flat or User API key the endpoint will return `400 - Can't use the x-flat header without the admin key`.

    ## Tickets system

    This API supports chore transfers. When a user transfers a chore to other user, a ticket also is transferred. A ticket is like a currency, +1 tickets means that the user is owed a chore (in the future another user will complete his chore), and -1 tickets means that the user owns a chore (in the future he will complete another user's chore).

    Diferent chore types are considered non equivalent, so a ticket of (the chore type) X can not be compensated with a ticket of type Y.

    ## Chore Assignements
    <!-- TODO: fill -->

    ### Initial chore assignments

    ### Skip week

    There are occasions when user would want to skip a week. For example, when a user is on vacation. In this case, the user must tell the API to remove himself from the pool when the chores are assigned. This can be done by using the [skipWeek](#tag/Skip-Chores/operation/skipWeek) operation.

    If a user has wrongly skipped a week, he can undo it by using the [undoSkipWeek](#tag/Skip-Chores/operation/undoSkipWeek) operation.

    # Authorization

    Access is controlled with API key based authorization. There are 3 types of API keys with different auth levels. Each one of them contains the same permissions as the ones below and more specific permissions.

    1. **Admin API key** (_AdminApiKey_): there is only one. It has permission to do anything, from creating a new flat to mark a chore as completed.
    2. **Flat API key** (_FlatAdminApiKey_): there is one for each flat. It has permission to manage the flat assigned and the users assigned to the flat.
    3. **User API key** (_UserApiKey_): there is one for each user. It has permission to act in name of the user, like transfering chores or completing chores.

externalDocs:
 description: Github Repo
 url: 'https://github.com/sralloza/chore-management-api'

tags:
  - name: Flats
    description: Operations with flats.
  - name: Chore Types
    description: Operations with chore types
  - name: Users
    description: Operations with users
  - name: Simple Chores
    description: Operations with chores in simple format
  - name: Tickets
    description: Operations with tickets
  - name: Skip Chores
    description: Operations to skip weekly chores assignments
  - name: Week IDs
    description: Operations with week identifiers

servers:
  - url: 'https://chore-management-api.sralloza.es/v1'

paths:
  /flats:
    post:
      tags:
        - Flats
      summary: Create flat
      description: Create new flat.
      operationId: createFlat
      security:
        - AdminApiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FlatCreate'
            examples:
              FlatCreate:
                $ref: '#/components/examples/FlatCreate'
      responses:
        200:
          $ref: '#/components/responses/Flat'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/ForbiddenErrorAdminRequired'
    get:
      tags:
        - Flats
      summary: List flats
      description: List existing flats.
      operationId: listFlats
      security:
        - AdminApiKey: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlatList'
              examples:
                FlatList:
                  $ref: '#/components/examples/FlatList'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/ForbiddenErrorAdminRequired'

  /flats/{flat_id}:
    get:
      tags:
        - Flats
      summary: Get flat
      description: Get flat details by id
      operationId: getFlat
      security:
        - FlatAdminApiKey: []
      parameters:
        - $ref: '#/components/parameters/FlatName'
      responses:
        200:
          $ref: '#/components/responses/Flat'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                FlatAccessRequired:
                  $ref: '#/components/examples/FlatAccessRequired'
                InvalidFlatHeaderUse:
                  $ref: '#/components/examples/InvalidFlatHeaderUse'
                InvalidFlatRequested:
                  $ref: '#/components/examples/InvalidFlatRequested'
        404:
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - Flats
      summary: Delete flat
      description: Delete flat by id
      operationId: deleteFlat
      security:
        - FlatAdminApiKey: []
      parameters:
        - $ref: '#/components/parameters/FlatName'
      responses:
        204:
          description: OK
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/ForbiddenErrorAdminRequired'
        404:
          $ref: '#/components/responses/NotFound'

  /chore-types:
    get:
      tags:
        - Chore Types
      summary: List defined chore types
      description: List the defined chore types.
      operationId: listChoreTypes
      security:
        - UserApiKey: []
      parameters:
        - $ref: '#/components/parameters/XFlatHeader'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChoreType'
              examples:
                chore type list:
                  $ref: "#/components/examples/ChoreTypeList"
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: "#/components/responses/ForbiddenErrorUserRequired"
    post:
      tags:
        - Chore Types
      summary: Create chore type
      description: Define a new chore type.
      operationId: createChoreType
      security:
        - FlatAdminApiKey: []
      parameters:
        - $ref: '#/components/parameters/XFlatHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChoreType'
            examples:
              ChoreType:
                $ref: '#/components/examples/ChoreType'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChoreType'
              examples:
                ChoreType:
                  $ref: '#/components/examples/ChoreType'
        400:
          $ref: '#/components/responses/ValidationError'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/ForbiddenErrorAdminRequired'

  /chore-types/{chore_type_id}:
    get:
      tags:
        - Chore Types
      summary: Get chore type
      description: Get the details of a defined chore type using its id.
      operationId: getChoreType
      security:
        - UserApiKey: []
      parameters:
        - $ref: '#/components/parameters/ChoreTypeID'
        - $ref: '#/components/parameters/XFlatHeader'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChoreType'
              examples:
                ChoreType:
                  $ref: '#/components/examples/ChoreType'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        403:
          $ref: '#/components/responses/ForbiddenErrorUserRequired'
    delete:
      tags:
        - Chore Types
      summary: Delete chore type
      description: Delete a chore type by id
      operationId: deleteChoreType
      security:
        - FlatAdminApiKey: []
      parameters:
        - $ref: '#/components/parameters/ChoreTypeID'
        - $ref: '#/components/parameters/XFlatHeader'
      responses:
        204:
          description: OK
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        403:
          $ref: '#/components/responses/ForbiddenErrorAdminRequired'

  /week-id/last:
    get:
      tags:
        - Week IDs
      summary: Get last week ID
      description: Get last week's identifier
      operationId: getLastWeekId
      responses:
        200:
          $ref: '#/components/responses/WeekID'

  /week-id/current:
    get:
      tags:
        - Week IDs
      summary: Get current week ID
      description: Get the current week identifier
      operationId: getCurrentWeekId
      responses:
        200:
          $ref: '#/components/responses/WeekID'

  /week-id/next:
    get:
      tags:
        - Week IDs
      summary: Get next week ID
      description: Get next week's identifier
      operationId: getNextWeekId
      responses:
        200:
          $ref: '#/components/responses/WeekID'

  /users:
    post:
      tags:
        - Users
      summary: Register new user
      description: Register a new user
      operationId: createUser
      security:
        - FlatAdminApiKey: []
      parameters:
        - $ref: '#/components/parameters/XFlatHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
            examples:
              UserCreate:
                $ref: '#/components/examples/UserCreate'
      responses:
        200:
          $ref: '#/components/responses/User'
        400:
          $ref: '#/components/responses/ValidationError'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/ForbiddenErrorFlatRequired'
        409:
          $ref: '#/components/responses/Conflict'

    get:
      tags:
        - Users
      summary: List users
      description: List all flat users
      operationId: listUsers
      security:
        - FlatAdminApiKey: []
      parameters:
        - $ref: '#/components/parameters/XFlatHeader'
      responses:
        200:
          $ref: '#/components/responses/UserList'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/ForbiddenErrorFlatRequired'

  /users/{user_id}:
    get:
      tags:
        - Users
      summary: Get user
      description: Get user by id
      operationId: getUser
      security:
        - FlatAdminApiKey: []
      parameters:
        - $ref: '#/components/parameters/UserIDPath'
        - $ref: '#/components/parameters/XFlatHeader'
      responses:
        200:
          $ref: '#/components/responses/User'
        400:
          $ref: '#/components/responses/ValidationError'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/ForbiddenErrorFlatRequired'
        404:
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Users
      summary: Delete user
      description: Delete user by id
      operationId: deleteUser
      security:
        - FlatAdminApiKey: []
      parameters:
        - $ref: '#/components/parameters/UserIDPath'
      responses:
        204:
          description: OK
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                UnbalancedTickets:
                  description: Cannot delete user with unbalanced tickets
                  value:
                    message: User has unbalanced tickets
                PendingChores:
                  description: Cannot delete user with pending chores
                  value:
                    message: User has pending chores
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/ForbiddenErrorFlatRequired'
        404:
          $ref: '#/components/responses/NotFound'

  /simple-chores:
    get:
      tags:
        - Simple Chores
      summary: List simple Chores
      description: List all simple chores
      operationId: listSimpleChores
      security:
        - FlatAdminApiKey: []
      parameters:
        - $ref: '#/components/parameters/XFlatHeader'
        - name: type_id
          description: Chore type to filter the chores
          in: query
          required: false
          schema:
            type: string
        - name: user_id
          in: query
          required: false
          description: User to filter the chores. This value should be set to the special keyword `me` when using a user API key.
          schema:
            $ref: '#/components/schemas/UserIDMe'
        - name: week_id
          in: query
          required: false
          description: Week ID to filter the chores
          schema:
            $ref: '#/components/schemas/WeekID'
        - name: done
          in: query
          required: false
          description: Filter by done status
          schema:
            type: boolean
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
      responses:
        200:
          $ref: '#/components/responses/SimpleChoreList'
        400:
          $ref: '#/components/responses/ValidationError'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/ForbiddenErrorFlatRequired'

  /tickets:
    get:
      tags:
        - Tickets
      summary: List tickets
      description: List all tickets
      operationId: listTickets
      security:
        - FlatAdminApiKey: []
      responses:
        200:
          $ref: '#/components/responses/TicketList'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/ForbiddenErrorFlatRequired'

  /users/{user_id}/skip/{week_id}:
    post:
      tags:
        - Skip Chores
      summary: Skip weekly chores
      description: Skip weekly chores for a user
      operationId: skipWeek
      security:
        - FlatAdminApiKey: []
      parameters:
        - $ref: '#/components/parameters/UserIDPath'
        - $ref: '#/components/parameters/WeekIDPath'
        - $ref: '#/components/parameters/XFlatHeader'
      responses:
        204:
          description: OK
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
              examples:
                ValidationError:
                  $ref: '#/components/examples/ValidationError'
                WeekAlreadySkipped: 
                  description: Week already skipped
                  value:
                    message: The user has already skipped the week
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/ForbiddenErrorFlatRequired'
    delete:
      tags:
        - Skip Chores
      summary: Undo skip weekly chores
      description: Undo skip weekly chores for a user
      operationId: undoSkipWeek
      security:
        - FlatAdminApiKey: []
      parameters:
        - $ref: '#/components/parameters/UserIDPath'
        - $ref: '#/components/parameters/WeekIDPath'
        - $ref: '#/components/parameters/XFlatHeader'
      responses:
        204:
          description: OK
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
              examples:
                ValidationError:
                  $ref: '#/components/examples/ValidationError'
                WeekNotSkipped:
                  description: Week not skipped
                  value:
                    message: The user has not skipped the week
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/ForbiddenErrorFlatRequired'

components:
  examples:
    AdminAccessRequired:
      description: The admin token is required
      value:
        mmesage: Admin access required

    ConflictError:
      description: The resource already exists
      value:
        message: The resource already exists

    ChoreType:
      value:
        id: livingRoom
        name: Living Room
        description: Clean the living room and the hallway

    ChoreTypeList:
      value:
        - id: livingRoom
          name: Living Room
          description: Clean the living room and the hallway

    Flat:
      value:
        name: flat-example
        token: ea427902-2db8-11ed-a261-0242ac120002

    FlatAccessRequired:
      description: An administration flat token is required
      value:
        message: Flat administration access required

    FlatCreate:
      value:
        name: flat-example

    FlatList:
      value:
        - name: flat-example
          token: ea427902-2db8-11ed-a261-0242ac120002

    InvalidFlatHeaderUse:
      description: The `x-flat` header was sent without an admin key
      value:
        message: Can't use the x-flat header without the admin key

    InvalidFlatRequested:
      description: The token provided does not grant access to the flat requested
      value:
        message: You don't have permission to access this flat's information

    SimpleChoreList:
      description: List of simple chores
      value:
        - type_id: livingRoom
          user_id: 1
          week_id: "2022.01"
          done: true
        - type_id: Kitchen
          user_id: 2
          week_id: "2022.01"
          done: false

    TicketList:
      description: List of chore tickets
      value:
        - id: A
          description: description-A
          tickets_by_tenant:
            1: -1
            2: -1
            3: 2
        - id: B
          description: description-B
          tickets_by_tenant:
            1: -1
            2: 0
            3: 1

    UnuthorizedError:
      description: An API key is needed
      value:
        message: An API key is needed

    UserAccessRequired:
      description: A user token is required
      value:
        message: User access required

    User:
      description: A User
      value:
        username: user-example
        id: 123456789
        api_key: 9ce30976-bb33-4cd7-acb5-b39a7cedb729

    UserCreate:
      description: Register new user
      value:
        username: user-example
        id: 123456789

    UserList:
      description: A list of users
      value:
        - username: user-example-1
          id: 123456789
          api_key: 9ce30976-bb33-4cd7-acb5-b39a7cedb729
        - username: user-example-2
          id: 987654321
          api_key: c26c9865-6d47-4f66-b586-7b489c72624e

    ValidationError:
      description: Validation error
      value:
        message: ValidationError
        errors:
          - message: Username must be a string
            value: 123
            location: body.username

  parameters:
    ChoreTypeID:
      name: chore_type_id
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/ChoreTypeId'

    FlatName:
      name: flat_id
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/FlatName'

    Offset:
      in: query
      name: offset
      description: Pagination offset
      required: false
      schema:
        type: integer
        default: 0

    Limit:
      in: query
      name: limit
      description: Pagination query size
      required: false
      schema:
        type: integer
        default: 100

    UserIDPath:
      name: user_id
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/UserIDMe"

    WeekIDPath:
      name: week_id
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/WeekID"

    XFlatHeader:
      name: x-flat
      in: header
      required: false
      schema:
        $ref: "#/components/schemas/XFlatHeader"

  responses:
    Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            ConflictError:
              $ref: '#/components/examples/ConflictError'

    Flat:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Flat'
          examples:
            Flat:
              $ref: '#/components/examples/Flat'

    ForbiddenErrorAdminRequired:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          examples:
            AdminAccessRequired:
              $ref: '#/components/examples/AdminAccessRequired'

    ForbiddenErrorFlatRequired:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          examples:
            FlatAccessRequired:
              $ref: '#/components/examples/FlatAccessRequired'
            InvalidFlatHeaderUse:
              $ref: '#/components/examples/InvalidFlatHeaderUse'

    ForbiddenErrorUserRequired:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          examples:
            UserAccessRequired:
              $ref: '#/components/examples/UserAccessRequired'
            InvalidFlatHeaderUse:
              $ref: '#/components/examples/InvalidFlatHeaderUse'

    InvalidFlatRequested:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          examples:
            InvalidFlatRequested:
              $ref: '#/components/examples/InvalidFlatRequested'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            message: Resource not found

    SimpleChoreList:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SimpleChoreList'
          examples:
            SimpleChoreList:
              $ref: '#/components/examples/SimpleChoreList'
    TicketList:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TicketList'
          examples:
            TicketList:
              $ref: '#/components/examples/TicketList'

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          examples:
            UnuthorizedError:
              $ref: '#/components/examples/UnuthorizedError'

    User:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
          examples:
            User:
              $ref: '#/components/examples/User'

    UserList:
      description: OK
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
          examples:
            UserList:
              $ref: '#/components/examples/UserList'

    ValidationError:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'

          examples:
            ValidationError:
              $ref: '#/components/examples/ValidationError'

    WeekID:
      description: OK
      content:
        application/json:
          schema:
            description: The week identifier
            type: object
            additionalProperties: false
            properties:
              week_id:
                $ref: '#/components/schemas/WeekID'
            required:
              - week_id
          example:
            week_id: "2022.03"

  schemas:
    ChoreType:
      description: Defined type of chore
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/ChoreTypeId'
        name:
          $ref: '#/components/schemas/ChoreTypeName'
        description:
          $ref: '#/components/schemas/ChoreTypeDescription'
      required:
        - id
        - name
        - description

    ChoreTypeDescription:
      description: Styled description of the chore type with markdown
      type: string
      minLength: 1
      maxLength: 255

    ChoreTypeId:
      description: ID of the chore type
      type: string
      minLength: 1
      maxLength: 25

    ChoreTypeName:
      description: Friendly name of the chore type
      type: string
      minLength: 1
      maxLength: 50

    Error:
      description: generic API error
      type: object
      additionalProperties: false
      properties:
        message:
          type: string
          description: A human readable description of what the event represent
      required:
        - message

    Flat:
      description: Registered flat
      type: object
      additionalProperties: false
      properties:
        name:
          $ref: '#/components/schemas/FlatName'
        token:
          type: string
          description: Admin flat token
          format: uuid
      required:
        - name
        - token

    FlatCreate:
      description: Register new flat
      type: object
      additionalProperties: false
      properties:
        name:
          type: string
          description: Name of the flat. Must be lowercase with dashes.
          pattern: '[a-z\-]+'
      required:
        - name

    FlatList:
      description: List of registered flats
      type: array
      items:
        $ref: '#/components/schemas/Flat'

    FlatName:
      type: string
      description: Name of the flat
      pattern: '[a-z\-]+'

    SingleValidationError:
      description: Validation error
      type: object
      additionalProperties: false
      properties:
        message:
          type: string
          description: A human readable description of what the validation error
        value:
          type: string
          description: The value that caused the validation error
        location:
          type: string
          description: Path to the attribute that caused the validation error
      required:
        - message
        - value
        - location

    SimpleChore:
      description: Simple chore
      type: object
      additionalProperties: false
      properties:
        user_id:
          $ref: '#/components/schemas/UserID'
        type_id:
          $ref: '#/components/schemas/ChoreTypeId'
        week_id:
          $ref: '#/components/schemas/WeekID'
        done:
          type: boolean
          description: Whether the chore is done or not
      required:
        - user_id
        - type_id
        - week_id
        - done

    SimpleChoreList:
      description: List of simple chores
      type: array
      items:
        $ref: '#/components/schemas/SimpleChore'

    Ticket:
      description: Chore ticket
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/ChoreTypeId'
        description:
          $ref: '#/components/schemas/ChoreTypeDescription'
        tickets_by_tenant:
          type: object
          description: Tickets grouped by tenant. The key is the userID.
          additionalProperties:
            description: Number of tickets of this type the user has.
            type: integer
            format: int32
      required:
        - id
        - description
        - tickets_by_tenant

    TicketList:
        description: List of chore tickets
        type: array
        items:
          $ref: '#/components/schemas/Ticket'

    User:
      description: Registered user
      type: object
      additionalProperties: false
      allOf:
        - $ref: '#/components/schemas/UserCreate'
        - properties:
            api_key:
              type: string
              format: uuid
              description: User's API token
          required:
            - api_key

    UserCreate:
      description: Register new user
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: "#/components/schemas/UserID"
        username:
          type: string
          description: User's nickname
          maxLength: 25
          minLength: 2
      required:
        - id
        - username

    UserIDMe:
      description: User ID. This value should be set to the special keyword `me` when using a user API key.
      anyOf:
        - type: string
          enum: [me]
        - $ref: "#/components/schemas/UserID"

    UserID:
      description: User identifier
      type: integer
      format: int64

    ValidationError:
      description: Validation error
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          properties:
            errors:
              type: array
              items:
                $ref: '#/components/schemas/SingleValidationError'

    XFlatHeader:
      type: string
      description: Name of the flat. For more info please refer to the [multiflat](#section/Concepts/Multiflat) section

    WeekID:
      description: Week identifier
      type: string
      pattern: '\d{4}\.\d{2}'
      example: "2022.03"

  securitySchemes:
    AdminApiKey:
      type: apiKey
      in: header
      name: x-token
    FlatAdminApiKey:
      type: apiKey
      in: header
      name: x-token
    UserApiKey:
      type: apiKey
      in: header
      name: x-token
