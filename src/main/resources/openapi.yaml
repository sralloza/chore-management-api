# This is an **example** API to demonstrate features of OpenAPI specification.
# It doesn't cover all OpenAPI features. For more full example check out: https://github.com/APIs-guru/petstore_extended

openapi: "3.0.1"
info:
  version: '1.0.0'
  title: Chore Management
  contact:
    email: sralloza@gmail.com
    url: https://github.com/sralloza
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'

  description: |
    API to manage the chores with the flatmates in a shared flat.

    Concepts:

    - **Flatmate**: Each person living in the same flat.
    - **Chore Type**: Minimum division of the chores of the flat. For example, if the common rooms in a flat are a bathroom, kitchen and a living room we can define 3 chore types: bathroom, kitchen and livingRoom so each week they are asigned to a different flatmate.
    - **Week ID**: Weeks are identified by the year and the week number, like "2022.03" (the third week of 2022).

externalDocs:
 description: Github Repo
 url: 'https://github.com/sralloza/chore-management-api'

tags:
  - name: Chore Types
    description: Operations with chore types
  - name: Week IDs
    description: Operations with week identifiers

servers:
  - url: 'https://chore-management-api.sralloza.es/v1'

paths:
  /chore-types:
    get:
      tags:
        - Chore Types
      summary: List defined chore types
      description: List the defined chore types.
      operationId: listChoreTypes
      security:
        - ApiKeyAuth: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChoreType'
              examples:
                chore type list:
                  $ref: "#/components/examples/ChoreTypeList"
        403:
          $ref: "#/components/responses/ForbiddenErrorTenantRequired"
    post:
      tags:
        - Chore Types
      summary: Create chore type
      description: Define a new chore type.
      operationId: createChoreType
      security:
        - ApiKeyAuth: []
      requestBody:
        description: chore type
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChoreType'
            examples:
              ChoreType:
                $ref: '#/components/examples/ChoreType'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChoreType'
              examples:
                ChoreType:
                  $ref: '#/components/examples/ChoreType'
        400:
          # TODO: define error model
          $ref: '#/components/responses/ValidationError'
        403:
          $ref: '#/components/responses/ForbiddenErrorAdminRequired'

  /chore-types/{id}:
    get:
      tags:
        - Chore Types
      summary: Get chore type
      description: Get the details of a defined chore type using its id.
      operationId: getChoreType
      security:
        - ApiKeyAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ChoreTypeId'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChoreType'
              examples:
                ChoreType:
                  $ref: '#/components/examples/ChoreType'
        404:
          $ref: '#/components/responses/NotFound'
        403:
          $ref: '#/components/responses/ForbiddenErrorTenantRequired'
    delete:
      tags:
        - Chore Types
      summary: Delete chore type
      description: Delete a chore type by id
      operationId: deleteChoreType
      security:
        - ApiKeyAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ChoreTypeId'
      responses:
        204:
          description: OK
        404:
          $ref: '#/components/responses/NotFound'
        403:
          $ref: '#/components/responses/ForbiddenErrorAdminRequired'
        400:
          description: Bad Request

  /week-id/last:
    get:
      tags:
        - Week IDs
      summary: Get last week ID
      description: Get last week's identifier
      operationId: getLastWeekId
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WeekID'

  /week-id/current:
    get:
      tags:
        - Week IDs
      summary: Get current week ID
      description: Get the current week identifier
      operationId: getCurrentWeekId
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WeekID'

  /week-id/next:
    get:
      tags:
        - Week IDs
      summary: Get next week ID
      description: Get next week's identifier
      operationId: getNextWeekId
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WeekID'

components:
  examples:
    ChoreTypeList:
      value:
        - id: livingRoom
          name: Living Room
          description: Clean the living room and the hallway
    ChoreType:
      value:
        id: livingRoom
        name: Living Room
        description: Clean the living room and the hallway

  responses:
    ForbiddenErrorAdminRequired:
      description: Admin access required
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            error: Forbidden
            message: Admin access required
            path: /some-url
            status: 403
            timestamp: 2022-09-04T14:26:40.381+00:00

    ForbiddenErrorTenantRequired:
      description: Tenant or admin access required
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            error: Forbidden
            message: Tenant access required
            path: /some-url
            status: 403
            timestamp: 2022-09-04T14:26:40.381+00:00

    ValidationError:
      description: Request contains invalid data
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Error'
              - type: object
                properties:
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/SingleValidationError'
          example:
            timestamp: '2022-09-04T21:17:15.900+00:00'
            status: 400
            error: Bad Request
            message: 'Validation failed for object=''exampleModel''. Error count: 1'
            errors:
              - codes:
                  - NotBlank.exampleModel.attribute
                  - NotBlank.attribute
                  - NotBlank.java.lang.String
                  - NotBlank
                arguments:
                  - codes:
                      - exampleModel.attribute
                      - attribute
                    arguments: null
                    defaultMessage: attribute
                    code: attribute
                defaultMessage: attribute can't be blank
                objectName: attribute
                field: attribute
                rejectedValue: null
                bindingFailure: false
                code: NotBlank
            path: /some-path

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: Not Found
            message: Resource not found
            path: /some-url
            status: 403
            timestamp: 2022-09-04T14:26:40.381+00:00

  schemas:
    ChoreTypeId:
      description: ID of a chore type
      type: string
      minLength: 1
      maxLength: 25

    ChoreTypeName:
      description: friendly name of a chore type
      type: string
      minLength: 1
      maxLength: 50

    ChoreTypeDescription:
      description: styled description of a chore type with markdown
      type: string
      minLength: 1
      maxLength: 255

    ChoreType:
      description: defined type of chore
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/ChoreTypeId'
        name:
          $ref: '#/components/schemas/ChoreTypeName'
        description:
          $ref: '#/components/schemas/ChoreTypeDescription'
      required:
      - id
      - name
      - description

    WeekID:
      description: Week identifier
      type: string
      pattern: "\\d{4}\\.\\d{2}"
      example: "2022.03"

    Error:
      description: generic API error
      type: object
      additionalProperties: false
      properties:
        error:
          type: string
          description: Error message associated with the status code
        message:
          type: string
          description: A human readable description of what the event represent
        path:
          type: string
          description: Path of the endpoint which generated the error
        status:
          type: integer
          description: Status code of the request
        timestamp:
          type: string
          format: datetime
          description: Datetime when the error was generated
      required:
        - error
        - message
        - path
        - status
        - timestamp

    SingleValidationError:
      description: Validation error
      type: object
      additionalProperties: false
      properties:
        codes:
          type: array
          items:
            type: string
        arguments:
          type: object
        defaultMessage:
          type: string
        objectName:
          type: string
        field:
          type: string
        rejectedValue:
          type: string
        bindingFailure:
          type: boolean
        code:
          type: string
      required:
        - codes
        - arguments
        - defaultMessage
        - objectName
        - field
        - bindingFailure
        - code

  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-token
